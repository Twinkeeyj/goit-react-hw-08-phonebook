{"version":3,"sources":["redux/listActions.js","route.js","redux/auth/authOperations.js","redux/auth/authActions.js","components/UserMenu/UserMenu.js","components/loading/loading.js","App.js","redux/listReducer.js","redux/auth/authReducer.js","redux/store.js","index.js"],"names":["addListRequest","createAction","addListSuccess","addListError","fetchListRequest","fetchListSuccess","fetchListError","removeListRequest","removeListSuccess","removeListError","filterContact","way","HomeView","LoginView","RegisterView","ContactsView","axios","defaults","baseURL","token","headers","common","Authorization","register","credentials","dispatch","authActions","registerRequest","post","then","response","data","registerSuccess","catch","error","registerError","logOut","logoutRequest","logoutSuccess","logoutError","logIn","loginRequest","loginSuccess","loginError","getCurrentUser","getState","persistedToken","auth","getCurrentUserRequest","get","getCurrentUserSuccess","getCurrentUserError","connect","state","name","user","avatar","onLogout","authOperations","src","alt","width","type","onClick","Loaders","color","height","timeout","React","Component","AsynkHomeView","lazy","AsynkLoginView","AsynkRegisterView","AsynkContactsView","App","this","props","isAuthenticated","onGetCurrentUser","fallback","exact","path","routes","component","to","initialState","items","createReducer","listAction","action","payload","_","filter","contact","id","loading","combineReducers","initialUserState","email","authPersistConfig","key","storage","whitelist","store","configureStore","reducer","contacts","contactsReducer","persistReducer","authReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c0a9beaa.chunk.js","sourcesContent":["import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addListRequest = createAction('contacts/addRequest');\r\nconst addListSuccess = createAction('contacts/addSuccess');\r\nconst addListError = createAction('contacts/addError');\r\n\r\nconst fetchListRequest = createAction('contacts/fetchRequest');\r\nconst fetchListSuccess = createAction('contacts/fetchSuccess');\r\nconst fetchListError = createAction('contacts/fetchError');\r\n\r\nconst removeListRequest = createAction('contacts/removeRequest');\r\nconst removeListSuccess = createAction('contacts/removeSuccess');\r\nconst removeListError = createAction('contacts/removeError');\r\n\r\n\r\nconst filterContact = createAction('FILTER_CONTACTS');\r\n\r\n\r\nexport default {\r\n  removeListError,\r\n  removeListSuccess,\r\n  removeListRequest,\r\n\r\n  filterContact,\r\n\r\n  addListRequest,\r\n  addListSuccess,\r\n  addListError,\r\n\r\n  fetchListRequest,\r\n  fetchListSuccess,\r\n  fetchListError,\r\n};\r\n","const way={\r\n  HomeView: \"/\",\r\n  LoginView: \"/login\",\r\n  RegisterView: \"/register\",\r\n  ContactsView: \"/contacts\"\r\n}\r\nexport default way","import axios from 'axios';\r\nimport authActions from './authActions';\r\n\r\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com/';\r\n\r\nconst token = {\r\n  set(token) {\r\n    axios.defaults.headers.common.Authorization = `Bearer ${token}`;\r\n  },\r\n  unset() {\r\n    axios.defaults.headers.common.Authorization = '';\r\n  },\r\n};\r\n\r\nconst register = credentials => dispatch => {\r\n  dispatch(authActions.registerRequest());\r\n\r\n  axios\r\n    .post('/users/signup', credentials)\r\n    .then(response => {\r\n      token.set(response.data.token);\r\n      dispatch(authActions.registerSuccess(response.data));\r\n    })\r\n    .catch(error => dispatch(authActions.registerError(error)));\r\n};\r\n\r\nconst logIn = credentials => dispatch => {\r\n  dispatch(authActions.loginRequest());\r\n\r\n  axios\r\n    .post('/users/login', credentials)\r\n    .then(response => {\r\n      token.set(response.data.token);\r\n      dispatch(authActions.loginSuccess(response.data));\r\n    })\r\n    .catch(error => dispatch(authActions.loginError(error)));\r\n};\r\n\r\nconst getCurrentUser = () => (dispatch, getState) => {\r\n  const {\r\n    auth: { token: persistedToken },\r\n  } = getState();\r\n\r\n  if (!persistedToken) {\r\n    return;\r\n  }\r\n\r\n  token.set(persistedToken);\r\n  dispatch(authActions.getCurrentUserRequest());\r\n\r\n  axios\r\n    .get('/users/current')\r\n    .then(({ data }) => dispatch(authActions.getCurrentUserSuccess(data)))\r\n    .catch(error => authActions.getCurrentUserError(error));\r\n};\r\n\r\nconst logOut = () => dispatch => {\r\n  dispatch(authActions.logoutRequest());\r\n\r\n  axios\r\n    .post('/users/logout')\r\n    .then(() => {\r\n      token.unset();\r\n      dispatch(authActions.logoutSuccess());\r\n    })\r\n    .catch(error => dispatch(authActions.logoutError(error)));\r\n};\r\n\r\nexport default { register, logOut, logIn, getCurrentUser };\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst registerRequest = createAction('auth/registerRequest');\r\nconst registerSuccess = createAction('auth/registerSuccess');\r\nconst registerError = createAction('auth/registerError');\r\n\r\nconst loginRequest = createAction('auth/loginRequest');\r\nconst loginSuccess = createAction('auth/loginSuccess');\r\nconst loginError = createAction('auth/loginError');\r\n\r\nconst logoutRequest = createAction('auth/logoutRequest');\r\nconst logoutSuccess = createAction('auth/logoutSuccess');\r\nconst logoutError = createAction('auth/logoutError');\r\n\r\nconst getCurrentUserRequest = createAction('auth/getCurrentUserRequest');\r\nconst getCurrentUserSuccess = createAction('auth/getCurrentUserSuccess');\r\nconst getCurrentUserError = createAction('auth/getCurrentUserError');\r\n\r\nexport default {\r\n  registerRequest,\r\n  registerSuccess,\r\n  registerError,\r\n  logoutRequest,\r\n  logoutSuccess,\r\n  logoutError,\r\n  loginRequest,\r\n  loginSuccess,\r\n  loginError,\r\n  getCurrentUserRequest,\r\n  getCurrentUserSuccess,\r\n  getCurrentUserError,\r\n};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport authOperations from \"../../redux/auth/authOperations\"\r\n\r\nconst UserMenu = ({ avatar, name, onLogout }) => (\r\n  <div >\r\n    <img src={avatar} alt=\"Твоє фото мудак!!!!!\" width=\"32\"  />\r\n    <span >Welcome, {name}</span>\r\n\r\n    <button type=\"button\" onClick={onLogout}>\r\n      Logout\r\n    </button>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  name: state.auth.user.name,\r\n  avatar:\r\n    'https://steamcdn-a.akamaihd.net/steamcommunity/public/images/avatars/ea/ea25bf27b1917865960af3c6e2364c29b83f58bd_full.jpg',\r\n});\r\n\r\nexport default connect(mapStateToProps, { onLogout: authOperations.logOut })(\r\n  UserMenu,\r\n);\r\n\r\n","import Loader from 'react-loader-spinner';\r\nimport React from 'react';\r\n\r\nexport default class Loaders extends React.Component {\r\n \r\n  render() {\r\n    return (\r\n      <Loader\r\n        type=\"TailSpin\"\r\n        color=\"#00BFFF\"\r\n        height={100}\r\n        width={100}\r\n        timeout={3000}\r\n      />\r\n    );\r\n  }\r\n}","\r\nimport React, { Component, lazy, Suspense } from 'react';\r\nimport {BrowserRouter, Redirect, Route, Switch} from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport routes from './route';\r\nimport UserMenu from \"./components/UserMenu/UserMenu\"\r\nimport authOperations from \"./redux/auth/authOperations\"\r\nimport Loader from \"./components/loading/loading\"\r\n\r\nconst AsynkHomeView = lazy(() => import('./views/HomeView'));\r\nconst AsynkLoginView = lazy(() => import('./views/LoginView'));\r\nconst AsynkRegisterView = lazy(() => import('./views/RegisterView'));\r\nconst AsynkContactsView = lazy(() => import('./views/ContactsView'));\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    if(this.props.isAuthenticated){\r\n      this.props.onGetCurrentUser();\r\n\r\n      return\r\n    }\r\n\r\n  }\r\n  render() {\r\n\r\n    return (\r\n      <>\r\n\r\n      <BrowserRouter>\r\n      <Suspense fallback={<><Loader/><h3>Loading...</h3></>}>\r\n       {this.props.isAuthenticated && <UserMenu/>}\r\n\r\n\r\n\r\n            <Switch>\r\n            <Route\r\n              exact\r\n              path={routes.HomeView}\r\n              component={AsynkHomeView}\r\n            />\r\n            <Route\r\n              exact\r\n              path={routes.LoginView}\r\n              component={AsynkLoginView}\r\n            />\r\n            <Route\r\n              exact\r\n              path={routes.ContactsView}\r\n              component={AsynkContactsView}\r\n            />\r\n            <Route\r\n              path={routes.RegisterView}\r\n              component={AsynkRegisterView}\r\n            />\r\n            <Redirect to=\"/\" />\r\n          </Switch>\r\n        </Suspense>\r\n        </BrowserRouter>\r\n      </>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps=state=>({\r\n  isAuthenticated: state.auth.token,\r\n})\r\n\r\nexport default connect(mapStateToProps, {\r\n  onGetCurrentUser: authOperations.getCurrentUser,\r\n\r\n})(App);\r\n\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport listAction from './listActions';\r\n\r\nconst initialState = {\r\n  contacts: [],\r\n  filter: '',\r\n};\r\n\r\nconst newContact = (state, action) => [...state, action.payload];\r\n\r\nconst removeAnyContact = (state, action) =>\r\n  state.filter(contact => contact.id !== action.payload);\r\n\r\nconst items = createReducer(initialState.contacts, {\r\n  [listAction.addListSuccess]: newContact,\r\n  [listAction.fetchListSuccess]: (_, action) => action.payload,\r\n  [listAction.removeListSuccess]: removeAnyContact,\r\n});\r\n\r\nconst filter = createReducer(initialState.filter, {\r\n  [listAction.filterContact]: (_, action) => action.payload,\r\n});\r\nconst loading = createReducer(false, {\r\n  [listAction.addListRequest]: () => true,\r\n  [listAction.addListSuccess]: () => false,\r\n});\r\n// const error = createReducer(null);\r\n\r\nexport default combineReducers({ items, filter, loading });\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport authActions from './authActions';\r\n\r\nconst initialUserState = { name: null, email: null };\r\n\r\nconst user = createReducer(initialUserState, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.user,\r\n  [authActions.getCurrentUserSuccess]: (_, { payload }) => payload,\r\n  [authActions.logoutSuccess]: () => initialUserState,\r\n});\r\n\r\nconst token = createReducer(null, {\r\n  [authActions.registerSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.loginSuccess]: (_, { payload }) => payload.token,\r\n  [authActions.logoutSuccess]: () => null,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [authActions.registerError]: (_, { payload }) => payload,\r\n  [authActions.loginError]: (_, { payload }) => payload,\r\n  [authActions.logoutError]: (_, { payload }) => payload,\r\n  [authActions.getCurrentUserError]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  user,\r\n  token,\r\n  error,\r\n});","import contactsReducer from './listReducer';\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport authReducer from './auth/authReducer';\r\n\r\nconst authPersistConfig = {\r\n  key: 'auth',\r\n  storage,\r\n  whitelist: ['token'],\r\n};\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n    auth: persistReducer(authPersistConfig, authReducer),\r\n  },\r\n  middleware: getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n});\r\n\r\nexport const persistor = persistStore(store);\r\n","// import React from 'react';\r\n// import ReactDOM from 'react-dom';\r\n// import './index.css';\r\n// import App from './App';\r\n// import { Provider } from 'react-redux';\r\n// import store from './redux/store';\r\n\r\n\r\n// ReactDOM.render(\r\n//   <Provider store={store}>\r\n//     <App />\r\n//   </Provider>,\r\n//   document.getElementById('root'),\r\n// );\r\n\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\n// import store from './redux/store';\r\n\r\nimport { PersistGate } from 'redux-persist/integration/react';\r\nimport { store, persistor } from './redux/store';\r\n\r\n// console.log(store,persistor);\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <App />\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);"],"sourceRoot":""}