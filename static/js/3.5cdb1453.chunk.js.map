{"version":3,"sources":["App.module.css","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","redux/contacts/contactsOperation.js","components/AnswerError/AnswerError.js","redux/listSelector.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","views/ContactsView.js"],"names":["module","exports","axios","defaults","baseURL","removeContact","id","dispatch","listAction","removeListRequest","delete","then","removeListSuccess","catch","error","removeListError","addContact","name","number","addListRequest","post","response","addListSuccess","data","addListError","fetchContact","fetchListRequest","get","fetchListSuccess","fetchListError","AnswerError","isVisible","CSSTransition","in","timeout","classNames","unmountOnExit","className","state","contacts","filter","items","contact","toLowerCase","includes","ContactForm","handleChange","target","setState","value","handleSubmit","event","preventDefault","props","list","some","setTimeout","this","classes","container","action","onSubmit","label","htmlFor","required","input","type","placeholder","onChange","Component","mapDispatchToProps","newContact","connect","selector","ContactList","TransitionGroup","component","map","el","button","onClick","contactsOperation","filterRender","filterContact","e","ContactsView","isAuthenticated","onFetchContact","history","replace","appear","Filter","contactsOperations","auth","token"],"mappings":"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","file":"static/js/3.5cdb1453.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2MweG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__3tnp5\",\"label\":\"ContactForm_label__3h9Ix\",\"input\":\"ContactForm_input__4oMAT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactList_container__2J0el\",\"list\":\"ContactList_list__CCvTN\",\"button\":\"ContactList_button__2GTzq\"};","import listAction from '../listActions';\r\nimport axios from 'axios';\r\n\r\naxios.defaults.baseURL = 'https://goit-phonebook-api.herokuapp.com';\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n  dispatch(listAction.addListRequest());\r\n  axios\r\n    .post('./contacts', { name, number })\r\n    .then(response => {\r\n      dispatch(listAction.addListSuccess(response.data));\r\n    })\r\n    .catch(error => dispatch(listAction.addListError(error)));\r\n};\r\n\r\nconst fetchContact = () => dispatch => {\r\n  dispatch(listAction.fetchListRequest());\r\n\r\n  axios\r\n    .get('./contacts')\r\n    .then(({ data }) => {\r\n      dispatch(listAction.fetchListSuccess(data));\r\n    })\r\n    .catch(error => dispatch(listAction.fetchListError(error)));\r\n};\r\n\r\nconst removeContact = id => dispatch => {\r\n  dispatch(listAction.removeListRequest());\r\n  axios\r\n    .delete(`./contacts/${id}`)\r\n    .then(() => {\r\n      dispatch(listAction.removeListSuccess(id));\r\n    })\r\n    .catch(error => dispatch(listAction.removeListError(error)));\r\n};\r\n\r\nexport default {\r\n  removeContact,\r\n  addContact,\r\n  fetchContact,\r\n};\r\n","import React from 'react';\r\n\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport '../../index.css';\r\n\r\nconst AnswerError = ({ isVisible }) => {\r\n  return (\r\n    <CSSTransition\r\n      in={isVisible}\r\n      timeout={250}\r\n      classNames=\"answer\"\r\n      unmountOnExit\r\n    >\r\n      <div className=\"answerContainer\">\r\n        <p>Contact already declared</p>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default AnswerError;\r\n","const getLoding = state => state.contacts.loading;\r\nconst getFilter = state => state.contacts.filter;\r\nconst getForm = state => state.contacts.items;\r\n\r\nconst getList = state =>\r\n  state.contacts.items.filter(contact =>\r\n    contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase())\r\n  );\r\n\r\nexport default {\r\n  getLoding,\r\n  getFilter,\r\n  getForm,\r\n  getList,\r\n};\r\n","import React, { Component } from 'react';\r\nimport classes from './ContactForm.module.css';\r\nimport { connect } from 'react-redux';\r\nimport newContact from '../../redux/contacts/contactsOperation';\r\nimport AnswerError from '../AnswerError/AnswerError';\r\nimport selector from \"../../redux/listSelector\"\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n    isVisible: false,\r\n      };\r\n\r\n  handleChange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const truly = this.props.list.some(\r\n      contact => contact.name === this.state.name,\r\n    );\r\n    if (truly) {\r\n      this.setState({\r\n        isVisible: true,\r\n      });\r\n      setTimeout(() => {\r\n        this.setState({\r\n          isVisible: false,\r\n        });\r\n      }, 1500);\r\n      return;\r\n    }\r\n    this.props.addContact({ ...this.state });\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number, isVisible } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <div>\r\n          <AnswerError isVisible={isVisible}  />\r\n        </div>\r\n\r\n        <form\r\n          className={classes.container}\r\n          action=\"\"\r\n          onSubmit={this.handleSubmit}\r\n        >\r\n          <label className={classes.label} htmlFor=\"name\">\r\n            Name\r\n          </label>\r\n          <input\r\n          required\r\n            className={classes.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"name\"\r\n            value={name}\r\n            onChange={this.handleChange}\r\n          />\r\n\r\n          <label className={classes.label} htmlFor=\"number\">\r\n            Number\r\n          </label>\r\n          <input\r\n          required\r\n            className={classes.input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            placeholder=\"number\"\r\n            value={number}\r\n            onChange={this.handleChange}\r\n          />\r\n          <input  type=\"submit\" value=\"Add contact\"  />\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  list: selector.getForm(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addContact: newContact.addContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classes from './ContactList.module.css';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport contactsOperation from '../../redux/contacts/contactsOperation';\r\nimport selector from \"../../redux/listSelector\"\r\n\r\nclass ContactList extends Component {\r\n  \r\n  render() {\r\n     return (\r\n      <>\r\n        <TransitionGroup component=\"ul\" className={classes.container}>\r\n          {this.props.list.map(el => {\r\n            return (\r\n              <CSSTransition key={el.id} classNames=\"showbutton\" timeout={250}>\r\n                <li key={el.id} className={classes.list}>\r\n                  {el.name} : {el.number}\r\n                  <button\r\n                    className={classes.button}\r\n                    type=\"button\"\r\n                    onClick={() => this.props.delete(el.id)}\r\n                  >\r\n                    Удалить\r\n                  </button>\r\n                </li>\r\n              </CSSTransition>\r\n            );\r\n          })}\r\n        </TransitionGroup>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.propTypes = {\r\n  delete: PropTypes.func.isRequired,\r\n  list: PropTypes.array.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  list: selector.getList(state),\r\n});\r\nconst mapDispatchToProps = {\r\n  delete: contactsOperation.removeContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport listAction from '../../redux/listActions';\r\nimport selector from \"../../redux/listSelector\"\r\n\r\n\r\nconst FilterName = ({ filterRender, filter }) => (\r\n  <div>\r\n    <label>Find contacts by name</label>\r\n    <input\r\n      type=\"text\"\r\n      value={filter}\r\n      onChange={e => filterRender(e.target.value)}\r\n    />\r\n  </div>\r\n);\r\n\r\nFilterName.propTypes = {\r\n  filterRender: PropTypes.func.isRequired,\r\n  filter: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = state =>\r\n({\r\n  filter: selector.getFilter(state),\r\n});\r\nconst mapDispatchToProps = {\r\n  filterRender: listAction.filterContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterName);\r\n","import React, { Component } from 'react'\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport classes from '../App.module.css';\r\n\r\n\r\nimport ContactForm from '../components/ContactForm/ContactForm';\r\nimport ContactList from '../components/ContactList/ContactList';\r\nimport Filter from '../components/Filter/Filter';\r\nimport { connect } from 'react-redux';\r\nimport contactsOperations from \"../redux/contacts/contactsOperation\"\r\n\r\n class ContactsView extends Component {\r\n  componentDidMount(){\r\n    if(!this.props.isAuthenticated){\r\n      this.props.history.replace(\"/\")\r\n\r\n      return\r\n    }\r\n    this.props.onFetchContact()\r\n  }\r\n  componentDidUpdate(){\r\n    if(!this.props.isAuthenticated){\r\n      this.props.history.replace(\"/\")\r\n\r\n      return\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={classes.container}>\r\n\r\n      <CSSTransition\r\n            in={true}\r\n            classNames=\"logo\"\r\n            timeout={250}\r\n            appear={true}\r\n            unmountOnExit\r\n          >\r\n            <h1>Phonebook</h1>\r\n          </CSSTransition>\r\n          <ContactForm />\r\n          <h2>Contacts</h2>\r\n          <Filter />\r\n          <ContactList />\r\n      </div>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps=state=>({\r\n  isAuthenticated: state.auth.token,\r\n})\r\n\r\nconst mapDispatchToProps={\r\n  onFetchContact: contactsOperations.fetchContact\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);"],"sourceRoot":""}